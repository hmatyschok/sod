Simple sign-on service on demand daemon (sod)
=============================================

WARNING: This software is WRITTEN from SCRATCH during a rapid
WARNING: developement session. There exists some likelyhood 
WARNING: that this software could contain some (serious) flaws.

This daemon provides (due to its early implementation status) only 
simple user authentication throught providing an interface for the 
backend of web-applications (or other funny things). 

Further, communication between backend and pam(8) is provided by 
using socket API. Transactions are mapped in AF_UNIX domain. See 

 | https://www.freebsd.org/cgi/man.cgi?query=unix&manpath=FreeBSD+10.3-stable

for further details. The use of IPC through socket(2) in unix(4) domain 
provides strict isolation between the domain of given backend and pam(8) 
subsystem. 

 | https://www.freebsd.org/cgi/man.cgi?query=pam&manpath=FreeBSD+10.3-stable

Now, it is up to the pam(8) subsystem to handle (or forward) service 
requests targeting local user data base or remote sites managing user 
credentials. 

Why was not libevent(3) used as proxy pattern performing 
asynchronous I/O on non-blocking unix(4) domain socket?

 | Because to avoid dependencies on  
 | external libraries.

Why was not used select(2) for aynchronous I/O? 

 | Because select(2) scales terribly on
 | large amounts by socket(2) allocated
 | file descriptors.

Why was not used kqueue(2)?

 | Because of portability.

Why is this a forking daemon using blocking streaming socket?

 | To hold the implementation as simple 
 | as possible.   
 |
 | Therefore, any child process maps to 
 | an uniqe Process Control Block which 
 | provides or describes an insulated 
 | context on asynchronous I/O events. 
 

